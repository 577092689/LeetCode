package highFrequencyLeetcode.leetcode_198;

/**
 * <p>
 *
 * 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
 *
 *  给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。
 *
 *  示例 1:
 *
 *  输入: [1,2,3,1]
 *  输出: 4
 *  解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
 *      偷窃到的最高金额 = 1 + 3 = 4 。
 *
 *  示例 2:
 *
 *  输入: [2,7,9,3,1]
 *  输出: 12
 *  解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
 *      偷窃到的最高金额 = 2 + 9 + 1 = 12 。
 *
 * </p>
 *
 * @author Seina
 * @version 2019-07-19 20:45:20
 */
public class HouseRobber {

    /**
     * 解法1 动态规划
     *
     * 递推公式：f(0) = nums[0]
     *          f(1) = max(nums[0], nums[1])
     *          f(k) = max(f(k - 2)nums[k], f(k - 1))
     *
     * 时间复杂度：O(n)
     * 空间复杂度：O(n)
     *
     * @param nums：每个房间现金数
     * @return 可偷最大值
     */
    public int rob(int[] nums) {
        int len = nums.length;
        if(len == 0) return 0;
        int[] dp = new int[len + 1];
        dp[0] = 0;//选择偷第一家，可偷最大值
        dp[1] = nums[0];//选择偷第二家，累加可偷最大值
        for(int i = 2; i <= len; i++) {
            dp[i] = Math.max(dp[i-1], dp[i-2] + nums[i-1]);//选择偷第 i 家，累加可偷最大值
        }
        return dp[len];
    }
}
